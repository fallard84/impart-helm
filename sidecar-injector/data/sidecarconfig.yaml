initContainers:
- name: proxy-init
  image: {{ .Values.proxyinit.image.repository }}
  imagePullPolicy: {{ .Values.proxyinit.image.pullPolicy }}
  args: [
    "--incoming-proxy-port",
    "{{ .Values.inspector.port }}",
    "--proxy-uid",
    "2103",
    "--inbound-ports-to-ignore",
    {{- if .Values.controlnode.enabled }}
    "{{ (printf "%s,%v" .Values.proxyinit.ignorePorts.inbound .Values.controlnode.service.port) | trimPrefix "," }}",
    {{- else }}
    "{{ .Values.proxyinit.ignorePorts.inbound }}",
    {{- end }}
    "--outbound-ports-to-ignore",
    {{- if .Values.controlnode.enabled }}
    "{{ (printf "%s,%v" .Values.proxyinit.ignorePorts.outbound .Values.controlnode.service.port) | trimPrefix "," }}",
    {{- else }}
    "{{ .Values.proxyinit.ignorePorts.outbound }}",
    {{- end }}
    ]
  securityContext:
    allowPrivilegeEscalation: true
    capabilities:
      add:
      - NET_ADMIN
      - NET_RAW
      drop:
      - ALL
containers:
- name: impart-inspector
  image: {{ .Values.inspector.image.repository }}
  imagePullPolicy: {{ .Values.inspector.image.pullPolicy }}
  securityContext:
    runAsUser: 2103
  env:
  - name: INSPECTOR_STATSD_HOST
    valueFrom:
      fieldRef:
        fieldPath: status.hostIP
  - name: INSPECTOR_SIDECAR_HTTP_LISTEN_ADDR
    value: ":{{ .Values.inspector.port }}"
  - name: INSPECTOR_MODE
    value: "sidecar_proxy"
  - name: INSPECTOR_SIDECAR_CONTAINER_BACKEND_SCHEME
    value: ""
  {{- if .Values.inspector.auth.accessTokenSecretRef }}
  - name: INSPECTOR_API_ACCESS_TOKEN
    valueFrom:
      secretKeyRef:
        name: {{ .Values.inspector.auth.accessTokenSecretRef }}
        key: accessToken
  {{- end }}
  {{- if .Values.controlnode.enabled }}
  - name: INSPECTOR_GOSSIP_PEER_ADDR
  {{- $gossipSvcName := include "sidecar-injector.controlnode.fullname" . -}}
  {{- $gossipEndpoint := printf "%s.%s.svc.cluster.local" $gossipSvcName .Release.Namespace }}
    value: {{ $gossipEndpoint }}:{{ .Values.controlnode.port }}
  {{- end }}
  - name: INSPECTOR_IMPART_API_URL
    value: {{ .Values.inspector.impartApiUrl }}
  - name: INSPECTOR_TLS_CERT
    value: "/etc/tls-secret/tls.crt"
  - name: INSPECTOR_TLS_KEY
    value: "/etc/tls-secret/tls.key"
  - name: INSPECTOR_AUTH0_TENANT_DOMAIN
    value: {{ .Values.inspector.auth.tenantDomain }}
  - name: INSPECTOR_JWT_AUDIENCE
    value: {{ .Values.inspector.auth.jwtAudience }}
  - name: INSPECTOR_API_CLIENT_ID
    value: {{ .Values.inspector.auth.apiClientId }}
  {{- if .Values.inspector.auth.apiSecretRef }}
  - name: INSPECTOR_API_CLIENT_SECRET
    valueFrom:
      secretKeyRef:
        name: {{ .Values.inspector.auth.apiSecretRef }}
        key: inspectorSecret
  {{- end }}
  resources:
    {{- toYaml .Values.inspector.resources | nindent 4 }}
  volumeMounts:
  {{- if .Values.inspector.tlsSecretRef }}
  - mountPath: "/etc/tls-secret"
    name: proxy-tls-secret
    readOnly: true
  {{- end }}
  {{- if .Values.inspector.additionalVolumeMounts }}
    {{- toYaml .Values.inspector.additionalVolumeMounts | nindent 2 }}
  {{- end }}
volumes:
{{- if .Values.inspector.tlsSecretRef }}
- name: proxy-tls-secret
  secret:
    secretName: {{ .Values.inspector.tlsSecretRef }}
{{- end }}
{{- if .Values.inspector.additionalVolumes }}
  {{- toYaml .Values.inspector.additionalVolumes | nindent 0 }}
{{- end }}
